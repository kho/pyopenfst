#!/usr/bin/python2.5


import sys,os
from math import log
import openfst

counts = {}

outfile = sys.argv[1]
assert not os.path.exists(outfile)
n = int(sys.argv[2])
assert n>1 and n<30

for file in sys.argv[3:]:
    for line in open(file).readlines():
        line = "^"*(n-1) + line
        for i in range(n,len(line)):
            ngram = line[i-n:i]
            counts[ngram] = 1 + counts.get(ngram,0)

ngrams = counts.keys()
ngrams.sort()
total = sum(counts.values())

fst = openfst.StdVectorFst()

nstates = 0
states = {}

def getstate(s):
    result = states.get(s)
    if result is None:
        result = fst.AddState()
        states[s] = result
    return result

start = getstate("^"*(n-1))
fst.SetStart(start)

for ngram in ngrams:
    frm = getstate(ngram[:-1])
    to = getstate(ngram[1:])
    cost = -log(counts[ngram]*1.0/total)
    fst.AddArc(frm,ord(ngram[-1]),ord(ngram[-1]),cost,to)
    fst.SetFinal(to,0.0)
    # print frm,to,ngram[-1],cost

det = openfst.StdVectorFst()
openfst.Determinize(fst,det)
openfst.Minimize(det)
det.Write(outfile)
